// Generated by gencpp from file swiftpro/SwiftproState.msg
// DO NOT EDIT!


#ifndef SWIFTPRO_MESSAGE_SWIFTPROSTATE_H
#define SWIFTPRO_MESSAGE_SWIFTPROSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace swiftpro
{
template <class ContainerAllocator>
struct SwiftproState_
{
  typedef SwiftproState_<ContainerAllocator> Type;

  SwiftproState_()
    : motor_angle1(0.0)
    , motor_angle2(0.0)
    , motor_angle3(0.0)
    , motor_angle4(0.0)
    , cart_x(0.0)
    , cart_y(0.0)
    , cart_z(0.0)  {
    }
  SwiftproState_(const ContainerAllocator& _alloc)
    : motor_angle1(0.0)
    , motor_angle2(0.0)
    , motor_angle3(0.0)
    , motor_angle4(0.0)
    , cart_x(0.0)
    , cart_y(0.0)
    , cart_z(0.0)  {
  (void)_alloc;
    }



   typedef double _motor_angle1_type;
  _motor_angle1_type motor_angle1;

   typedef double _motor_angle2_type;
  _motor_angle2_type motor_angle2;

   typedef double _motor_angle3_type;
  _motor_angle3_type motor_angle3;

   typedef double _motor_angle4_type;
  _motor_angle4_type motor_angle4;

   typedef double _cart_x_type;
  _cart_x_type cart_x;

   typedef double _cart_y_type;
  _cart_y_type cart_y;

   typedef double _cart_z_type;
  _cart_z_type cart_z;




  typedef boost::shared_ptr< ::swiftpro::SwiftproState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::swiftpro::SwiftproState_<ContainerAllocator> const> ConstPtr;

}; // struct SwiftproState_

typedef ::swiftpro::SwiftproState_<std::allocator<void> > SwiftproState;

typedef boost::shared_ptr< ::swiftpro::SwiftproState > SwiftproStatePtr;
typedef boost::shared_ptr< ::swiftpro::SwiftproState const> SwiftproStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::swiftpro::SwiftproState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::swiftpro::SwiftproState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace swiftpro

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'swiftpro': ['/home/roger/Documents/catkin_wss/src/swiftpro/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::swiftpro::SwiftproState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::swiftpro::SwiftproState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::swiftpro::SwiftproState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::swiftpro::SwiftproState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::swiftpro::SwiftproState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::swiftpro::SwiftproState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::swiftpro::SwiftproState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "54400e8e7d89551c7509a6fd5e1b307f";
  }

  static const char* value(const ::swiftpro::SwiftproState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x54400e8e7d89551cULL;
  static const uint64_t static_value2 = 0x7509a6fd5e1b307fULL;
};

template<class ContainerAllocator>
struct DataType< ::swiftpro::SwiftproState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "swiftpro/SwiftproState";
  }

  static const char* value(const ::swiftpro::SwiftproState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::swiftpro::SwiftproState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 motor_angle1\n\
float64 motor_angle2\n\
float64 motor_angle3\n\
float64 motor_angle4\n\
float64 cart_x\n\
float64 cart_y\n\
float64 cart_z\n\
\n\
";
  }

  static const char* value(const ::swiftpro::SwiftproState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::swiftpro::SwiftproState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.motor_angle1);
      stream.next(m.motor_angle2);
      stream.next(m.motor_angle3);
      stream.next(m.motor_angle4);
      stream.next(m.cart_x);
      stream.next(m.cart_y);
      stream.next(m.cart_z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SwiftproState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::swiftpro::SwiftproState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::swiftpro::SwiftproState_<ContainerAllocator>& v)
  {
    s << indent << "motor_angle1: ";
    Printer<double>::stream(s, indent + "  ", v.motor_angle1);
    s << indent << "motor_angle2: ";
    Printer<double>::stream(s, indent + "  ", v.motor_angle2);
    s << indent << "motor_angle3: ";
    Printer<double>::stream(s, indent + "  ", v.motor_angle3);
    s << indent << "motor_angle4: ";
    Printer<double>::stream(s, indent + "  ", v.motor_angle4);
    s << indent << "cart_x: ";
    Printer<double>::stream(s, indent + "  ", v.cart_x);
    s << indent << "cart_y: ";
    Printer<double>::stream(s, indent + "  ", v.cart_y);
    s << indent << "cart_z: ";
    Printer<double>::stream(s, indent + "  ", v.cart_z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SWIFTPRO_MESSAGE_SWIFTPROSTATE_H
